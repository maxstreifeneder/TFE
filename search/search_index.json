{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home \u00b6 For full documentation visit mkdocs.org . Commands \u00b6 mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout \u00b6 mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Home"},{"location":"#home","text":"For full documentation visit mkdocs.org .","title":"Home"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"about/","text":"About \u00b6 A projects UI5 Tooling configuration is typically located in a YAML file named ui5.yaml , located in the root directory. Info This document describes the configuration of UI5 Tooling based projects and extensions. It represents Specification Version 2.2 . Validation / IDE support \u00b6 Starting with specification version 2.0 the configuration is validated according to a JSON schema. The current version of the schema can be found here: https://sap.github.io/ui5-tooling/schema/ui5.yaml.json The schema is also part of the JSON Schema Store catalog which is used by the YAML Language Server . See the list of clients to find extensions for various IDEs and editors. Example \u00b6 specVersion : \"2.2\" type : application|library|theme-library|module metadata : name : some.project.name General Configuration \u00b6 A project must define a specification version ( specVersion ), to which its configuration is compatible to. Also see Specification Versions . In addition, a project must define a type . This can be either application , library , theme-library (since Specification Version 1.1) or module . The type defines the default path mappings and build tasks. See UI5 Builder: Types for details. Example application specVersion : \"2.2\" type : application library specVersion : \"2.2\" type : library theme-library specVersion : \"2.2\" type : theme-library module specVersion : \"2.2\" type : module Metadata \u00b6 Example metadata : name : my.company.project copyright : |- My Project * (c) Copyright 2009-${currentYear} My Company * Licensed under the XYZ License, Version n - see LICENSE.txt. name \u00b6 A project must have a name and might define a copyright string. In the UI5 Tooling, a project is typically identified by the configured name . It must be unique and should ideally follow a namespace scheme like company.businessarea.project . copyright \u00b6 A given copyright string will be used to fill placeholders like ${copyright} and @copyright@ in a projects source code. |- is a way to define a multi line string in YAML. For details, please check the YAML Specification . Inside the copyright string, you can use the placeholder ${currentYear} which will be replaced with the current year. deprecated \u00b6 In case your project is deprecated you may also define a property deprecated: true . In projects that have a direct dependency to your project, UI5 Tooling will then display a deprecation warning. Resources \u00b6 Path Mapping \u00b6 Depending on the project type, UI5 Tooling expects your projects source files to be located in certain directories. If your project's sources are located in different directories, you need to configure the path mapping accordingly. Depending on the type of project, there are several different path mappings available. Note that all configured paths must be written in POSIX (i.e. using only forward slashes / ) and relative to the project's root directory. Available Path Mappings \u00b6 Applications webapp : Mapped to runtime path / (root) Default configuration: resources : configuration : paths : webapp : webapp Libraries src : Mapped to runtime path /resources test : Mapped to runtime path /test-resources Default configuration: resources : configuration : paths : src : src test : test Modules Any virtual paths can be mapped to any physical path. However, it is recommended that modules include their namespace in the virtual path and use the /resources prefix (e.g. /resources/my/library/module-xy/ ). Example configuration: resources : configuration : paths : /resources/my/library/module-xy/ : lib /resources/my/library/module-xy-min/ : dist Example For an application project with the following directory structure, you need the path mapping configuration given below: Directory Structure my-app/ \\_ ui5.yaml \\_ lib/ \\_ js/ \\_ app/ Path Mapping Configuration resources : configuration : paths : webapp : lib/js/app Encoding of *.properties files \u00b6 Info This configuration is available since UI5 CLI v1.7.0 Example UTF-8 resources : configuration : propertiesFileSourceEncoding : UTF-8 ISO-8859-1 resources : configuration : propertiesFileSourceEncoding : ISO-8859-1 By default the UI5 Tooling expects different encodings for *.properties i18n files, depending on the project's specification version: Specification Version Default propertiesFileSourceEncoding 2.0+ UTF-8 0.1, 1.0 or 1.1 ISO-8859-1 If your project uses a different encoding for *.properties files, you need to set the propertiesFileSourceEncoding configuration property. The UI5 Tooling will read the corresponding files of the project in the given encoding. Any non-ASCII characters will be replaced with the respective Unicode escape sequences. This allows you to deploy the resulting files to any environment, independent of how it expects *.properties files to be encoded. Please refer to RFC 7 for details. Custom Configuration \u00b6 Info This configuration is available since UI5 CLI v2.2.0 and applies only to projects defining Specification Version 2.1 or higher. Example customConfiguration : myTool : key : value myOtherTool : otherKey : otherValue Custom configuration that is ignored by the UI5 Tooling. This can be used to store UI5 specific configuration for third-party tools. The \"customConfiguration\" value must be an object. For third-party tools it is recommended to follow a namespace-like structure. Framework Configuration \u00b6 Info This configuration is available since UI5 CLI v2.0.0 and applies only to projects defining Specification Version 2.0 or higher. Define your project's framework dependencies. Framework and Version \u00b6 In your project's framework configuration you must define whether you want to use the OpenUI5 or the SAPUI5 framework and which version: OpenUI5 framework : name : OpenUI5 version : 1.82.0 SAPUI5 framework : name : SAPUI5 version : 1.82.0 If you are not sure which framework is right for you, see our documentation on the differences between OpenUI5 and SAPUI5 . You can find an overview of the available versions for each framework here: OpenUI5 Version Overview The lowest version supported by UI5 Tooling is 1.52.5 SAPUI5 Version Overview The lowest version supported by UI5 Tooling is 1.76.0 Info Projects that use the OpenUI5 framework cannot depend on projects that use the SAPUI5 framework. Dependencies \u00b6 Example application specVersion : \"2.2\" type : application metadata : name : my.company.app framework : name : OpenUI5 version : 1.82.0 libraries : - name : sap.ui.core - name : sap.m - name : sap.ui.table - name : themelib_sap_fiori_3 library specVersion : \"2.2\" type : library metadata : name : my.company.library framework : name : SAPUI5 version : 1.82.0 libraries : - name : sap.ui.core - name : sap.m - name : themelib_sap_belize optional : true - name : themelib_sap_bluecrystal optional : true - name : themelib_sap_fiori_3 optional : true When building an application depending on this library as well as one of the theme libraries, only that theme is built for this library. Runtime Dependencies \u00b6 All libraries required by your project must be listed in the libraries section of the framework configuration: OpenUI5 framework : name : OpenUI5 version : 1.82.0 libraries : - name : sap.ui.core - name : sap.m - name : sap.ui.table SAPUI5 framework : name : SAPUI5 version : 1.82.0 libraries : - name : sap.ui.core - name : sap.m - name : sap.ui.comp Development Dependencies \u00b6 Development dependencies are only installed if the project defining them is the current root project. They are typically only required during the development of the project. libraries : - name : sap.ushell development : true Note that a development dependency cannot be optional and vice versa. Optional Dependencies \u00b6 Optional dependencies are installed either if the project defining them is the current root project or if the dependency is already part of the current dependency tree. A typical use case is libraries defining optional dependencies to all theme libraries they support. You can choose which theme library to use by the application that is consuming the library by declaring it as a non-optional dependency. libraries : - name : themelib_sap_fiori_3 optional : true Build Configuration \u00b6 Exclude Resources \u00b6 Example builder : resources : excludes : - \"/resources/some/project/name/test_results/**\" - \"/test-resources/**\" - \"!/test-resources/some/project/name/demo-app/**\" You can exclude a projects resources from the build process using a list of glob patterns. Matching resources will be ignored by the builder and all build tasks. Patterns are applied to the virtual path of resources (i.e. the UI5 runtime paths). Exclude patterns are always applied after any includes. Cachebuster \u00b6 Example time (default) builder : cachebuster : signatureType : time hash builder : cachebuster : signatureType : hash By default, the generated cachebuster info file signatures are based on timestamps ( time ). In setups like CI environments, a mechanism based on file hashes ( hash ) might be more reliable. Also see PR #241 for more details. Component Preload Generation \u00b6 For projects of type application a Component-preload.js bundle is generated by default. You can override this default behavior by defining a componentPreload configuration. For projects of type library there is no Component Preload created by default. However you can define a componentPreload configuration to create Component Preload bundles. Those will be created in addition to the library-preload.js bundle. There are two ways of including components, which can also be used in combination with each other: paths \u00b6 The paths option takes one or multiple patterns. For every matched file a separate Component-preload.js will be generated. Patterns are always applied relative to the project's virtual source directory /resources/ Example builder : componentPreload : paths : - \"my/great/app/**/Component.js\" namespaces \u00b6 The namespaces option takes one or multiple component namespaces, which correspond to the directory structures: Example builder : componentPreload : namespaces : - \"my/great/app/componentOne\" - \"my/great/app/componentTwo\" Custom Tasks \u00b6 Example builder : customTasks : - name : custom-task-1 beforeTask : replaceCopyright configuration : some-key : some value - name : custom-task-2 afterTask : custom-task-1 configuration : color : blue You can define custom build tasks that will be executed for the project. Please refer to the Custom Tasks Documentation for a detailed explanation and examples of the build extensibility. Each customTasks entry must define the name of the custom task as defined in its metadata.name property. In addition, the execution order needs to be defined by referencing a standard task or an already configured custom task using the afterTask or beforeTask property. Optionally, arbitrary configuration can be passed to the custom task. JSDoc \u00b6 Example builder : jsdoc : excludes : - \"some/project/name/thirdparty/**\" You can exclude the resources of a project from the JSDoc build process using a list of glob patterns. Matching resources will be ignored by the JSDoc build task. Patterns are always applied relative to the project's virtual source directory /resources/ . These excludes are applied before any general builder excludes that have been defined in builder.resources.excludes . Server Configuration \u00b6 Example server : settings : httpPort : 1337 httpsPort : 1443 By default, UI5 Tooling will serve applications using Port 8080 . When running in HTTP/2 or HTTPS mode, Port 8443 will be used. If the default port is already in use, the next highest free port will be used. A project can also configure alternative default ports. If the configured port is already in use, an error will be thrown. The default and configured server ports can always be overwritten with the CLI parameter --port . Extension Configuration \u00b6 Example specVersion : \"2.2\" type : application metadata : name : my.application --- specVersion : \"2.2\" kind : extension type : project-shim metadata : name : my.application.thirdparty shims : configurations : lodash : specVersion : \"2.2\" type : module metadata : name : lodash resources : configuration : paths : /resources/my/application/thirdparty/ : \"\" Extensions configuration can be added to any projects ui5.yaml . For better readability, it should to be located after the projects configuration, separated by three dashes \" --- \". In cases where an extension shall be reused across multiple projects you can make it a module itself and have its configuration in a standalone ui5.yaml located inside that module. Extensions can be identified by the kind: extension configuration. Note that if no kind configuration is given, project is assumed. Available Extensions \u00b6 Custom Tasks Custom Server Middleware Project Shims Custom Bundling \u00b6 Example builder : bundles : - bundleDefinition : name : \"sap-ui-custom.js\" defaultFileTypes : - \".js\" sections : - mode : raw filters : - ui5loader-autoconfig.js resolve : true sort : true bundleOptions : optimize : true - bundleDefinition : name : \"app.js\" defaultFileTypes : - \".js\" sections : - mode : preload filters : - some/app/Component.js resolve : true sort : true - mode : provided filters : - ui5loader-autoconfig.js resolve : true bundleOptions : optimize : true Custom bundles can be defined in the ui5.yaml . Within the builder/bundles configuration a list of bundleDefinitions can be described. Properties \u00b6 bundles A list of bundle definitions. A bundleDefinition contains of the following options: name : The module bundle name defaultFileTypes : List of default file types which should be included in the bundle sections : A list of module bundle definition sections. Each section specifies an embedding technology (see API-Reference ) and lists the resources that should be in- or excluded from the section. mode : The embedding technology (e.g. provided, raw, preload) filters : List of resources as glob patterns that should be in- or excluded. A pattern either contains of a trailing slash / or single * and double ** asterisks which denote an arbitrary number of characters or folder names. Exludes should be marked with a leading exclamation mark '!'. The order of filters is relevant, a later exclusion overrides an earlier inclusion and vice versa. resolve : Setting resolve to true will also include all (transitive) dependencies of the files resolveConditional : Whether conditional dependencies of modules should be resolved and added to the module set for this section. By default set to false declareRawModules : Whether raw modules should be declared after jQuery.sap.global became available. With the usage of the ui5loader, this flag should be set to 'false'. By default set to false renderer : Whether renderers for controls should be added to the module set. By default set to false sort : By default, modules are sorted by their dependencies. The sorting can be suppressed by setting the option to false bundleOptions optimize : By default set to false . If set to true , the module bundle gets minified decorateBootstrapModule : By default set to false . If set to true , the module will be decorated with an optimization marker addTryCatchRestartWrapper : By default set to false . If set to true , bootable module bundles gets wrapped with a try/catch to filter \"Restart\" errors usePredefineCalls : If set to true , sap.ui.predefine is used for UI5 modules numberOfParts : By default set to 1 . The number of parts into which a module bundle should be splitted Specification Versions \u00b6 A project must define a Specification Version by setting the specVersion property. The UI5 Tooling uses this information to detect whether the currently installed version is compatible to a projects configuration. specVersion : \"2.2\" [ ... ] To use new features, a project might need to update the specVersion property. For a given Specification Version MAJOR.MINOR we will increment: MAJOR when there are breaking changes that might require additional actions by the project maintainer MINOR when adding new features that are fully backward compatible All changes are documented below. Compatibility Matrix \u00b6 Unless otherwise noted in the table below, the UI5 Tooling modules are backward compatible. Version UI5 CLI Release 2.2 v2.4.0+ 2.1 v2.2.0+ 2.0 v2.0.0+ 1.1 v1.13.0+ 1.0 v1.0.0+ 0.1 v0.0.1+ Specification Version 2.2 \u00b6 Features: Custom task extensions can make use of the TaskUtil Helper Class Specification Version 2.2 projects are supported by UI5 CLI v2.4.0 and above. Specification Version 2.1 \u00b6 Features: Adds support for the \"customConfiguration\" configuration Custom middleware extensions can make use of the MiddlewareUtil Helper Class Specification Version 2.1 projects are supported by UI5 CLI v2.2.0 and above. Specification Version 2.0 \u00b6 Breaking changes: Adds and enforces schema validation of the ui5.yaml By default the encoding of *.properties files is expected to be UTF-8 (as opposed to ISO-8859-1 in projects defining specification versions below 2.0) A project can still explicitly configure the encoding of its *.properties files Features: Adds support for the \"framework\" configuration to consume SAPUI5 libraries. Specification Version 2.0 projects are supported by UI5 CLI v2.0.0 and above. Specification Version 1.1 \u00b6 Features: Adds support for the theme-library type. Specification Version 1.1 projects are supported by UI5 CLI v1.13.0 and above. Specification Version 1.0 \u00b6 First stable release. Specification Version 1.0 projects are supported by UI5 CLI v1.0.0 and above. Specification Version 0.1 \u00b6 Initial version. Specification Version 0.1 projects are compatible with UI5 CLI v0.0.1 and above. Configuration \u00b6 A projects UI5 Tooling configuration is typically located in a YAML file named ui5.yaml , located in the root directory. Info This document describes the configuration of UI5 Tooling based projects and extensions. It represents Specification Version 2.2 . Validation / IDE support \u00b6 Starting with specification version 2.0 the configuration is validated according to a JSON schema. The current version of the schema can be found here: https://sap.github.io/ui5-tooling/schema/ui5.yaml.json The schema is also part of the JSON Schema Store catalog which is used by the YAML Language Server . See the list of clients to find extensions for various IDEs and editors. Example \u00b6 specVersion : \"2.2\" type : application|library|theme-library|module metadata : name : some.project.name General Configuration \u00b6 A project must define a specification version ( specVersion ), to which its configuration is compatible to. Also see Specification Versions . In addition, a project must define a type . This can be either application , library , theme-library (since Specification Version 1.1) or module . The type defines the default path mappings and build tasks. See UI5 Builder: Types for details. Example application specVersion : \"2.2\" type : application library specVersion : \"2.2\" type : library theme-library specVersion : \"2.2\" type : theme-library module specVersion : \"2.2\" type : module Metadata \u00b6 Example metadata : name : my.company.project copyright : |- My Project * (c) Copyright 2009-${currentYear} My Company * Licensed under the XYZ License, Version n - see LICENSE.txt. name \u00b6 A project must have a name and might define a copyright string. In the UI5 Tooling, a project is typically identified by the configured name . It must be unique and should ideally follow a namespace scheme like company.businessarea.project . copyright \u00b6 A given copyright string will be used to fill placeholders like ${copyright} and @copyright@ in a projects source code. |- is a way to define a multi line string in YAML. For details, please check the YAML Specification . Inside the copyright string, you can use the placeholder ${currentYear} which will be replaced with the current year. deprecated \u00b6 In case your project is deprecated you may also define a property deprecated: true . In projects that have a direct dependency to your project, UI5 Tooling will then display a deprecation warning. Resources \u00b6 Path Mapping \u00b6 Depending on the project type, UI5 Tooling expects your projects source files to be located in certain directories. If your project's sources are located in different directories, you need to configure the path mapping accordingly. Depending on the type of project, there are several different path mappings available. Note that all configured paths must be written in POSIX (i.e. using only forward slashes / ) and relative to the project's root directory. Available Path Mappings \u00b6 Applications webapp : Mapped to runtime path / (root) Default configuration: resources : configuration : paths : webapp : webapp Libraries src : Mapped to runtime path /resources test : Mapped to runtime path /test-resources Default configuration: resources : configuration : paths : src : src test : test Modules Any virtual paths can be mapped to any physical path. However, it is recommended that modules include their namespace in the virtual path and use the /resources prefix (e.g. /resources/my/library/module-xy/ ). Example configuration: resources : configuration : paths : /resources/my/library/module-xy/ : lib /resources/my/library/module-xy-min/ : dist Example For an application project with the following directory structure, you need the path mapping configuration given below: Directory Structure my-app/ \\_ ui5.yaml \\_ lib/ \\_ js/ \\_ app/ Path Mapping Configuration resources : configuration : paths : webapp : lib/js/app Encoding of *.properties files \u00b6 Info This configuration is available since UI5 CLI v1.7.0 Example UTF-8 resources : configuration : propertiesFileSourceEncoding : UTF-8 ISO-8859-1 resources : configuration : propertiesFileSourceEncoding : ISO-8859-1 By default the UI5 Tooling expects different encodings for *.properties i18n files, depending on the project's specification version: Specification Version Default propertiesFileSourceEncoding 2.0+ UTF-8 0.1, 1.0 or 1.1 ISO-8859-1 If your project uses a different encoding for *.properties files, you need to set the propertiesFileSourceEncoding configuration property. The UI5 Tooling will read the corresponding files of the project in the given encoding. Any non-ASCII characters will be replaced with the respective Unicode escape sequences. This allows you to deploy the resulting files to any environment, independent of how it expects *.properties files to be encoded. Please refer to RFC 7 for details. Custom Configuration \u00b6 Info This configuration is available since UI5 CLI v2.2.0 and applies only to projects defining Specification Version 2.1 or higher. Example customConfiguration : myTool : key : value myOtherTool : otherKey : otherValue Custom configuration that is ignored by the UI5 Tooling. This can be used to store UI5 specific configuration for third-party tools. The \"customConfiguration\" value must be an object. For third-party tools it is recommended to follow a namespace-like structure. Framework Configuration \u00b6 Info This configuration is available since UI5 CLI v2.0.0 and applies only to projects defining Specification Version 2.0 or higher. Define your project's framework dependencies. Framework and Version \u00b6 In your project's framework configuration you must define whether you want to use the OpenUI5 or the SAPUI5 framework and which version: OpenUI5 framework : name : OpenUI5 version : 1.82.0 SAPUI5 framework : name : SAPUI5 version : 1.82.0 If you are not sure which framework is right for you, see our documentation on the differences between OpenUI5 and SAPUI5 . You can find an overview of the available versions for each framework here: OpenUI5 Version Overview The lowest version supported by UI5 Tooling is 1.52.5 SAPUI5 Version Overview The lowest version supported by UI5 Tooling is 1.76.0 Info Projects that use the OpenUI5 framework cannot depend on projects that use the SAPUI5 framework. Dependencies \u00b6 Example application specVersion : \"2.2\" type : application metadata : name : my.company.app framework : name : OpenUI5 version : 1.82.0 libraries : - name : sap.ui.core - name : sap.m - name : sap.ui.table - name : themelib_sap_fiori_3 library specVersion : \"2.2\" type : library metadata : name : my.company.library framework : name : SAPUI5 version : 1.82.0 libraries : - name : sap.ui.core - name : sap.m - name : themelib_sap_belize optional : true - name : themelib_sap_bluecrystal optional : true - name : themelib_sap_fiori_3 optional : true When building an application depending on this library as well as one of the theme libraries, only that theme is built for this library. Runtime Dependencies \u00b6 All libraries required by your project must be listed in the libraries section of the framework configuration: OpenUI5 framework : name : OpenUI5 version : 1.82.0 libraries : - name : sap.ui.core - name : sap.m - name : sap.ui.table SAPUI5 framework : name : SAPUI5 version : 1.82.0 libraries : - name : sap.ui.core - name : sap.m - name : sap.ui.comp Development Dependencies \u00b6 Development dependencies are only installed if the project defining them is the current root project. They are typically only required during the development of the project. libraries : - name : sap.ushell development : true Note that a development dependency cannot be optional and vice versa. Optional Dependencies \u00b6 Optional dependencies are installed either if the project defining them is the current root project or if the dependency is already part of the current dependency tree. A typical use case is libraries defining optional dependencies to all theme libraries they support. You can choose which theme library to use by the application that is consuming the library by declaring it as a non-optional dependency. libraries : - name : themelib_sap_fiori_3 optional : true Build Configuration \u00b6 Exclude Resources \u00b6 Example builder : resources : excludes : - \"/resources/some/project/name/test_results/**\" - \"/test-resources/**\" - \"!/test-resources/some/project/name/demo-app/**\" You can exclude a projects resources from the build process using a list of glob patterns. Matching resources will be ignored by the builder and all build tasks. Patterns are applied to the virtual path of resources (i.e. the UI5 runtime paths). Exclude patterns are always applied after any includes. Cachebuster \u00b6 Example time (default) builder : cachebuster : signatureType : time hash builder : cachebuster : signatureType : hash By default, the generated cachebuster info file signatures are based on timestamps ( time ). In setups like CI environments, a mechanism based on file hashes ( hash ) might be more reliable. Also see PR #241 for more details. Component Preload Generation \u00b6 For projects of type application a Component-preload.js bundle is generated by default. You can override this default behavior by defining a componentPreload configuration. For projects of type library there is no Component Preload created by default. However you can define a componentPreload configuration to create Component Preload bundles. Those will be created in addition to the library-preload.js bundle. There are two ways of including components, which can also be used in combination with each other: paths \u00b6 The paths option takes one or multiple patterns. For every matched file a separate Component-preload.js will be generated. Patterns are always applied relative to the project's virtual source directory /resources/ Example builder : componentPreload : paths : - \"my/great/app/**/Component.js\" namespaces \u00b6 The namespaces option takes one or multiple component namespaces, which correspond to the directory structures: Example builder : componentPreload : namespaces : - \"my/great/app/componentOne\" - \"my/great/app/componentTwo\" Custom Tasks \u00b6 Example builder : customTasks : - name : custom-task-1 beforeTask : replaceCopyright configuration : some-key : some value - name : custom-task-2 afterTask : custom-task-1 configuration : color : blue You can define custom build tasks that will be executed for the project. Please refer to the Custom Tasks Documentation for a detailed explanation and examples of the build extensibility. Each customTasks entry must define the name of the custom task as defined in its metadata.name property. In addition, the execution order needs to be defined by referencing a standard task or an already configured custom task using the afterTask or beforeTask property. Optionally, arbitrary configuration can be passed to the custom task. JSDoc \u00b6 Example builder : jsdoc : excludes : - \"some/project/name/thirdparty/**\" You can exclude the resources of a project from the JSDoc build process using a list of glob patterns. Matching resources will be ignored by the JSDoc build task. Patterns are always applied relative to the project's virtual source directory /resources/ . These excludes are applied before any general builder excludes that have been defined in builder.resources.excludes . Server Configuration \u00b6 Example server : settings : httpPort : 1337 httpsPort : 1443 By default, UI5 Tooling will serve applications using Port 8080 . When running in HTTP/2 or HTTPS mode, Port 8443 will be used. If the default port is already in use, the next highest free port will be used. A project can also configure alternative default ports. If the configured port is already in use, an error will be thrown. The default and configured server ports can always be overwritten with the CLI parameter --port . Extension Configuration \u00b6 Example specVersion : \"2.2\" type : application metadata : name : my.application --- specVersion : \"2.2\" kind : extension type : project-shim metadata : name : my.application.thirdparty shims : configurations : lodash : specVersion : \"2.2\" type : module metadata : name : lodash resources : configuration : paths : /resources/my/application/thirdparty/ : \"\" Extensions configuration can be added to any projects ui5.yaml . For better readability, it should to be located after the projects configuration, separated by three dashes \" --- \". In cases where an extension shall be reused across multiple projects you can make it a module itself and have its configuration in a standalone ui5.yaml located inside that module. Extensions can be identified by the kind: extension configuration. Note that if no kind configuration is given, project is assumed. Available Extensions \u00b6 Custom Tasks Custom Server Middleware Project Shims Custom Bundling \u00b6 Example builder : bundles : - bundleDefinition : name : \"sap-ui-custom.js\" defaultFileTypes : - \".js\" sections : - mode : raw filters : - ui5loader-autoconfig.js resolve : true sort : true bundleOptions : optimize : true - bundleDefinition : name : \"app.js\" defaultFileTypes : - \".js\" sections : - mode : preload filters : - some/app/Component.js resolve : true sort : true - mode : provided filters : - ui5loader-autoconfig.js resolve : true bundleOptions : optimize : true Custom bundles can be defined in the ui5.yaml . Within the builder/bundles configuration a list of bundleDefinitions can be described. Properties \u00b6 bundles A list of bundle definitions. A bundleDefinition contains of the following options: name : The module bundle name defaultFileTypes : List of default file types which should be included in the bundle sections : A list of module bundle definition sections. Each section specifies an embedding technology (see API-Reference ) and lists the resources that should be in- or excluded from the section. mode : The embedding technology (e.g. provided, raw, preload) filters : List of resources as glob patterns that should be in- or excluded. A pattern either contains of a trailing slash / or single * and double ** asterisks which denote an arbitrary number of characters or folder names. Exludes should be marked with a leading exclamation mark '!'. The order of filters is relevant, a later exclusion overrides an earlier inclusion and vice versa. resolve : Setting resolve to true will also include all (transitive) dependencies of the files resolveConditional : Whether conditional dependencies of modules should be resolved and added to the module set for this section. By default set to false declareRawModules : Whether raw modules should be declared after jQuery.sap.global became available. With the usage of the ui5loader, this flag should be set to 'false'. By default set to false renderer : Whether renderers for controls should be added to the module set. By default set to false sort : By default, modules are sorted by their dependencies. The sorting can be suppressed by setting the option to false bundleOptions optimize : By default set to false . If set to true , the module bundle gets minified decorateBootstrapModule : By default set to false . If set to true , the module will be decorated with an optimization marker addTryCatchRestartWrapper : By default set to false . If set to true , bootable module bundles gets wrapped with a try/catch to filter \"Restart\" errors usePredefineCalls : If set to true , sap.ui.predefine is used for UI5 modules numberOfParts : By default set to 1 . The number of parts into which a module bundle should be splitted Specification Versions \u00b6 A project must define a Specification Version by setting the specVersion property. The UI5 Tooling uses this information to detect whether the currently installed version is compatible to a projects configuration. specVersion : \"2.2\" [ ... ] To use new features, a project might need to update the specVersion property. For a given Specification Version MAJOR.MINOR we will increment: MAJOR when there are breaking changes that might require additional actions by the project maintainer MINOR when adding new features that are fully backward compatible All changes are documented below. Compatibility Matrix \u00b6 Unless otherwise noted in the table below, the UI5 Tooling modules are backward compatible. Version UI5 CLI Release 2.2 v2.4.0+ 2.1 v2.2.0+ 2.0 v2.0.0+ 1.1 v1.13.0+ 1.0 v1.0.0+ 0.1 v0.0.1+ Specification Version 2.2 \u00b6 Features: Custom task extensions can make use of the TaskUtil Helper Class Specification Version 2.2 projects are supported by UI5 CLI v2.4.0 and above. Specification Version 2.1 \u00b6 Features: Adds support for the \"customConfiguration\" configuration Custom middleware extensions can make use of the MiddlewareUtil Helper Class Specification Version 2.1 projects are supported by UI5 CLI v2.2.0 and above. Specification Version 2.0 \u00b6 Breaking changes: Adds and enforces schema validation of the ui5.yaml By default the encoding of *.properties files is expected to be UTF-8 (as opposed to ISO-8859-1 in projects defining specification versions below 2.0) A project can still explicitly configure the encoding of its *.properties files Features: Adds support for the \"framework\" configuration to consume SAPUI5 libraries. Specification Version 2.0 projects are supported by UI5 CLI v2.0.0 and above. Specification Version 1.1 \u00b6 Features: Adds support for the theme-library type. Specification Version 1.1 projects are supported by UI5 CLI v1.13.0 and above. Specification Version 1.0 \u00b6 First stable release. Specification Version 1.0 projects are supported by UI5 CLI v1.0.0 and above. Specification Version 0.1 \u00b6 Initial version. Specification Version 0.1 projects are compatible with UI5 CLI v0.0.1 and above.","title":"About"},{"location":"about/#about","text":"A projects UI5 Tooling configuration is typically located in a YAML file named ui5.yaml , located in the root directory. Info This document describes the configuration of UI5 Tooling based projects and extensions. It represents Specification Version 2.2 .","title":"About"},{"location":"about/#validation-ide-support","text":"Starting with specification version 2.0 the configuration is validated according to a JSON schema. The current version of the schema can be found here: https://sap.github.io/ui5-tooling/schema/ui5.yaml.json The schema is also part of the JSON Schema Store catalog which is used by the YAML Language Server . See the list of clients to find extensions for various IDEs and editors.","title":"Validation / IDE support"},{"location":"about/#example","text":"specVersion : \"2.2\" type : application|library|theme-library|module metadata : name : some.project.name","title":"Example"},{"location":"about/#general-configuration","text":"A project must define a specification version ( specVersion ), to which its configuration is compatible to. Also see Specification Versions . In addition, a project must define a type . This can be either application , library , theme-library (since Specification Version 1.1) or module . The type defines the default path mappings and build tasks. See UI5 Builder: Types for details. Example application specVersion : \"2.2\" type : application library specVersion : \"2.2\" type : library theme-library specVersion : \"2.2\" type : theme-library module specVersion : \"2.2\" type : module","title":"General Configuration"},{"location":"about/#metadata","text":"Example metadata : name : my.company.project copyright : |- My Project * (c) Copyright 2009-${currentYear} My Company * Licensed under the XYZ License, Version n - see LICENSE.txt.","title":"Metadata"},{"location":"about/#name","text":"A project must have a name and might define a copyright string. In the UI5 Tooling, a project is typically identified by the configured name . It must be unique and should ideally follow a namespace scheme like company.businessarea.project .","title":"name"},{"location":"about/#copyright","text":"A given copyright string will be used to fill placeholders like ${copyright} and @copyright@ in a projects source code. |- is a way to define a multi line string in YAML. For details, please check the YAML Specification . Inside the copyright string, you can use the placeholder ${currentYear} which will be replaced with the current year.","title":"copyright"},{"location":"about/#deprecated","text":"In case your project is deprecated you may also define a property deprecated: true . In projects that have a direct dependency to your project, UI5 Tooling will then display a deprecation warning.","title":"deprecated"},{"location":"about/#resources","text":"","title":"Resources"},{"location":"about/#path-mapping","text":"Depending on the project type, UI5 Tooling expects your projects source files to be located in certain directories. If your project's sources are located in different directories, you need to configure the path mapping accordingly. Depending on the type of project, there are several different path mappings available. Note that all configured paths must be written in POSIX (i.e. using only forward slashes / ) and relative to the project's root directory.","title":"Path Mapping"},{"location":"about/#available-path-mappings","text":"Applications webapp : Mapped to runtime path / (root) Default configuration: resources : configuration : paths : webapp : webapp Libraries src : Mapped to runtime path /resources test : Mapped to runtime path /test-resources Default configuration: resources : configuration : paths : src : src test : test Modules Any virtual paths can be mapped to any physical path. However, it is recommended that modules include their namespace in the virtual path and use the /resources prefix (e.g. /resources/my/library/module-xy/ ). Example configuration: resources : configuration : paths : /resources/my/library/module-xy/ : lib /resources/my/library/module-xy-min/ : dist Example For an application project with the following directory structure, you need the path mapping configuration given below: Directory Structure my-app/ \\_ ui5.yaml \\_ lib/ \\_ js/ \\_ app/ Path Mapping Configuration resources : configuration : paths : webapp : lib/js/app","title":"Available Path Mappings"},{"location":"about/#encoding-of-properties-files","text":"Info This configuration is available since UI5 CLI v1.7.0 Example UTF-8 resources : configuration : propertiesFileSourceEncoding : UTF-8 ISO-8859-1 resources : configuration : propertiesFileSourceEncoding : ISO-8859-1 By default the UI5 Tooling expects different encodings for *.properties i18n files, depending on the project's specification version: Specification Version Default propertiesFileSourceEncoding 2.0+ UTF-8 0.1, 1.0 or 1.1 ISO-8859-1 If your project uses a different encoding for *.properties files, you need to set the propertiesFileSourceEncoding configuration property. The UI5 Tooling will read the corresponding files of the project in the given encoding. Any non-ASCII characters will be replaced with the respective Unicode escape sequences. This allows you to deploy the resulting files to any environment, independent of how it expects *.properties files to be encoded. Please refer to RFC 7 for details.","title":"Encoding of *.properties files"},{"location":"about/#custom-configuration","text":"Info This configuration is available since UI5 CLI v2.2.0 and applies only to projects defining Specification Version 2.1 or higher. Example customConfiguration : myTool : key : value myOtherTool : otherKey : otherValue Custom configuration that is ignored by the UI5 Tooling. This can be used to store UI5 specific configuration for third-party tools. The \"customConfiguration\" value must be an object. For third-party tools it is recommended to follow a namespace-like structure.","title":"Custom Configuration"},{"location":"about/#framework-configuration","text":"Info This configuration is available since UI5 CLI v2.0.0 and applies only to projects defining Specification Version 2.0 or higher. Define your project's framework dependencies.","title":"Framework Configuration"},{"location":"about/#framework-and-version","text":"In your project's framework configuration you must define whether you want to use the OpenUI5 or the SAPUI5 framework and which version: OpenUI5 framework : name : OpenUI5 version : 1.82.0 SAPUI5 framework : name : SAPUI5 version : 1.82.0 If you are not sure which framework is right for you, see our documentation on the differences between OpenUI5 and SAPUI5 . You can find an overview of the available versions for each framework here: OpenUI5 Version Overview The lowest version supported by UI5 Tooling is 1.52.5 SAPUI5 Version Overview The lowest version supported by UI5 Tooling is 1.76.0 Info Projects that use the OpenUI5 framework cannot depend on projects that use the SAPUI5 framework.","title":"Framework and Version"},{"location":"about/#dependencies","text":"Example application specVersion : \"2.2\" type : application metadata : name : my.company.app framework : name : OpenUI5 version : 1.82.0 libraries : - name : sap.ui.core - name : sap.m - name : sap.ui.table - name : themelib_sap_fiori_3 library specVersion : \"2.2\" type : library metadata : name : my.company.library framework : name : SAPUI5 version : 1.82.0 libraries : - name : sap.ui.core - name : sap.m - name : themelib_sap_belize optional : true - name : themelib_sap_bluecrystal optional : true - name : themelib_sap_fiori_3 optional : true When building an application depending on this library as well as one of the theme libraries, only that theme is built for this library.","title":"Dependencies"},{"location":"about/#runtime-dependencies","text":"All libraries required by your project must be listed in the libraries section of the framework configuration: OpenUI5 framework : name : OpenUI5 version : 1.82.0 libraries : - name : sap.ui.core - name : sap.m - name : sap.ui.table SAPUI5 framework : name : SAPUI5 version : 1.82.0 libraries : - name : sap.ui.core - name : sap.m - name : sap.ui.comp","title":"Runtime Dependencies"},{"location":"about/#development-dependencies","text":"Development dependencies are only installed if the project defining them is the current root project. They are typically only required during the development of the project. libraries : - name : sap.ushell development : true Note that a development dependency cannot be optional and vice versa.","title":"Development Dependencies"},{"location":"about/#optional-dependencies","text":"Optional dependencies are installed either if the project defining them is the current root project or if the dependency is already part of the current dependency tree. A typical use case is libraries defining optional dependencies to all theme libraries they support. You can choose which theme library to use by the application that is consuming the library by declaring it as a non-optional dependency. libraries : - name : themelib_sap_fiori_3 optional : true","title":"Optional Dependencies"},{"location":"about/#build-configuration","text":"","title":"Build Configuration"},{"location":"about/#exclude-resources","text":"Example builder : resources : excludes : - \"/resources/some/project/name/test_results/**\" - \"/test-resources/**\" - \"!/test-resources/some/project/name/demo-app/**\" You can exclude a projects resources from the build process using a list of glob patterns. Matching resources will be ignored by the builder and all build tasks. Patterns are applied to the virtual path of resources (i.e. the UI5 runtime paths). Exclude patterns are always applied after any includes.","title":"Exclude Resources"},{"location":"about/#cachebuster","text":"Example time (default) builder : cachebuster : signatureType : time hash builder : cachebuster : signatureType : hash By default, the generated cachebuster info file signatures are based on timestamps ( time ). In setups like CI environments, a mechanism based on file hashes ( hash ) might be more reliable. Also see PR #241 for more details.","title":"Cachebuster"},{"location":"about/#component-preload-generation","text":"For projects of type application a Component-preload.js bundle is generated by default. You can override this default behavior by defining a componentPreload configuration. For projects of type library there is no Component Preload created by default. However you can define a componentPreload configuration to create Component Preload bundles. Those will be created in addition to the library-preload.js bundle. There are two ways of including components, which can also be used in combination with each other:","title":"Component Preload Generation"},{"location":"about/#paths","text":"The paths option takes one or multiple patterns. For every matched file a separate Component-preload.js will be generated. Patterns are always applied relative to the project's virtual source directory /resources/ Example builder : componentPreload : paths : - \"my/great/app/**/Component.js\"","title":"paths"},{"location":"about/#namespaces","text":"The namespaces option takes one or multiple component namespaces, which correspond to the directory structures: Example builder : componentPreload : namespaces : - \"my/great/app/componentOne\" - \"my/great/app/componentTwo\"","title":"namespaces"},{"location":"about/#custom-tasks","text":"Example builder : customTasks : - name : custom-task-1 beforeTask : replaceCopyright configuration : some-key : some value - name : custom-task-2 afterTask : custom-task-1 configuration : color : blue You can define custom build tasks that will be executed for the project. Please refer to the Custom Tasks Documentation for a detailed explanation and examples of the build extensibility. Each customTasks entry must define the name of the custom task as defined in its metadata.name property. In addition, the execution order needs to be defined by referencing a standard task or an already configured custom task using the afterTask or beforeTask property. Optionally, arbitrary configuration can be passed to the custom task.","title":"Custom Tasks"},{"location":"about/#jsdoc","text":"Example builder : jsdoc : excludes : - \"some/project/name/thirdparty/**\" You can exclude the resources of a project from the JSDoc build process using a list of glob patterns. Matching resources will be ignored by the JSDoc build task. Patterns are always applied relative to the project's virtual source directory /resources/ . These excludes are applied before any general builder excludes that have been defined in builder.resources.excludes .","title":"JSDoc"},{"location":"about/#server-configuration","text":"Example server : settings : httpPort : 1337 httpsPort : 1443 By default, UI5 Tooling will serve applications using Port 8080 . When running in HTTP/2 or HTTPS mode, Port 8443 will be used. If the default port is already in use, the next highest free port will be used. A project can also configure alternative default ports. If the configured port is already in use, an error will be thrown. The default and configured server ports can always be overwritten with the CLI parameter --port .","title":"Server Configuration"},{"location":"about/#extension-configuration","text":"Example specVersion : \"2.2\" type : application metadata : name : my.application --- specVersion : \"2.2\" kind : extension type : project-shim metadata : name : my.application.thirdparty shims : configurations : lodash : specVersion : \"2.2\" type : module metadata : name : lodash resources : configuration : paths : /resources/my/application/thirdparty/ : \"\" Extensions configuration can be added to any projects ui5.yaml . For better readability, it should to be located after the projects configuration, separated by three dashes \" --- \". In cases where an extension shall be reused across multiple projects you can make it a module itself and have its configuration in a standalone ui5.yaml located inside that module. Extensions can be identified by the kind: extension configuration. Note that if no kind configuration is given, project is assumed.","title":"Extension Configuration"},{"location":"about/#available-extensions","text":"Custom Tasks Custom Server Middleware Project Shims","title":"Available Extensions"},{"location":"about/#custom-bundling","text":"Example builder : bundles : - bundleDefinition : name : \"sap-ui-custom.js\" defaultFileTypes : - \".js\" sections : - mode : raw filters : - ui5loader-autoconfig.js resolve : true sort : true bundleOptions : optimize : true - bundleDefinition : name : \"app.js\" defaultFileTypes : - \".js\" sections : - mode : preload filters : - some/app/Component.js resolve : true sort : true - mode : provided filters : - ui5loader-autoconfig.js resolve : true bundleOptions : optimize : true Custom bundles can be defined in the ui5.yaml . Within the builder/bundles configuration a list of bundleDefinitions can be described.","title":"Custom Bundling"},{"location":"about/#properties","text":"bundles A list of bundle definitions. A bundleDefinition contains of the following options: name : The module bundle name defaultFileTypes : List of default file types which should be included in the bundle sections : A list of module bundle definition sections. Each section specifies an embedding technology (see API-Reference ) and lists the resources that should be in- or excluded from the section. mode : The embedding technology (e.g. provided, raw, preload) filters : List of resources as glob patterns that should be in- or excluded. A pattern either contains of a trailing slash / or single * and double ** asterisks which denote an arbitrary number of characters or folder names. Exludes should be marked with a leading exclamation mark '!'. The order of filters is relevant, a later exclusion overrides an earlier inclusion and vice versa. resolve : Setting resolve to true will also include all (transitive) dependencies of the files resolveConditional : Whether conditional dependencies of modules should be resolved and added to the module set for this section. By default set to false declareRawModules : Whether raw modules should be declared after jQuery.sap.global became available. With the usage of the ui5loader, this flag should be set to 'false'. By default set to false renderer : Whether renderers for controls should be added to the module set. By default set to false sort : By default, modules are sorted by their dependencies. The sorting can be suppressed by setting the option to false bundleOptions optimize : By default set to false . If set to true , the module bundle gets minified decorateBootstrapModule : By default set to false . If set to true , the module will be decorated with an optimization marker addTryCatchRestartWrapper : By default set to false . If set to true , bootable module bundles gets wrapped with a try/catch to filter \"Restart\" errors usePredefineCalls : If set to true , sap.ui.predefine is used for UI5 modules numberOfParts : By default set to 1 . The number of parts into which a module bundle should be splitted","title":"Properties"},{"location":"about/#specification-versions","text":"A project must define a Specification Version by setting the specVersion property. The UI5 Tooling uses this information to detect whether the currently installed version is compatible to a projects configuration. specVersion : \"2.2\" [ ... ] To use new features, a project might need to update the specVersion property. For a given Specification Version MAJOR.MINOR we will increment: MAJOR when there are breaking changes that might require additional actions by the project maintainer MINOR when adding new features that are fully backward compatible All changes are documented below.","title":"Specification Versions"},{"location":"about/#compatibility-matrix","text":"Unless otherwise noted in the table below, the UI5 Tooling modules are backward compatible. Version UI5 CLI Release 2.2 v2.4.0+ 2.1 v2.2.0+ 2.0 v2.0.0+ 1.1 v1.13.0+ 1.0 v1.0.0+ 0.1 v0.0.1+","title":"Compatibility Matrix"},{"location":"about/#specification-version-22","text":"Features: Custom task extensions can make use of the TaskUtil Helper Class Specification Version 2.2 projects are supported by UI5 CLI v2.4.0 and above.","title":"Specification Version 2.2"},{"location":"about/#specification-version-21","text":"Features: Adds support for the \"customConfiguration\" configuration Custom middleware extensions can make use of the MiddlewareUtil Helper Class Specification Version 2.1 projects are supported by UI5 CLI v2.2.0 and above.","title":"Specification Version 2.1"},{"location":"about/#specification-version-20","text":"Breaking changes: Adds and enforces schema validation of the ui5.yaml By default the encoding of *.properties files is expected to be UTF-8 (as opposed to ISO-8859-1 in projects defining specification versions below 2.0) A project can still explicitly configure the encoding of its *.properties files Features: Adds support for the \"framework\" configuration to consume SAPUI5 libraries. Specification Version 2.0 projects are supported by UI5 CLI v2.0.0 and above.","title":"Specification Version 2.0"},{"location":"about/#specification-version-11","text":"Features: Adds support for the theme-library type. Specification Version 1.1 projects are supported by UI5 CLI v1.13.0 and above.","title":"Specification Version 1.1"},{"location":"about/#specification-version-10","text":"First stable release. Specification Version 1.0 projects are supported by UI5 CLI v1.0.0 and above.","title":"Specification Version 1.0"},{"location":"about/#specification-version-01","text":"Initial version. Specification Version 0.1 projects are compatible with UI5 CLI v0.0.1 and above.","title":"Specification Version 0.1"},{"location":"about/#configuration","text":"A projects UI5 Tooling configuration is typically located in a YAML file named ui5.yaml , located in the root directory. Info This document describes the configuration of UI5 Tooling based projects and extensions. It represents Specification Version 2.2 .","title":"Configuration"},{"location":"about/#validation-ide-support_1","text":"Starting with specification version 2.0 the configuration is validated according to a JSON schema. The current version of the schema can be found here: https://sap.github.io/ui5-tooling/schema/ui5.yaml.json The schema is also part of the JSON Schema Store catalog which is used by the YAML Language Server . See the list of clients to find extensions for various IDEs and editors.","title":"Validation / IDE support"},{"location":"about/#example_1","text":"specVersion : \"2.2\" type : application|library|theme-library|module metadata : name : some.project.name","title":"Example"},{"location":"about/#general-configuration_1","text":"A project must define a specification version ( specVersion ), to which its configuration is compatible to. Also see Specification Versions . In addition, a project must define a type . This can be either application , library , theme-library (since Specification Version 1.1) or module . The type defines the default path mappings and build tasks. See UI5 Builder: Types for details. Example application specVersion : \"2.2\" type : application library specVersion : \"2.2\" type : library theme-library specVersion : \"2.2\" type : theme-library module specVersion : \"2.2\" type : module","title":"General Configuration"},{"location":"about/#metadata_1","text":"Example metadata : name : my.company.project copyright : |- My Project * (c) Copyright 2009-${currentYear} My Company * Licensed under the XYZ License, Version n - see LICENSE.txt.","title":"Metadata"},{"location":"about/#name_1","text":"A project must have a name and might define a copyright string. In the UI5 Tooling, a project is typically identified by the configured name . It must be unique and should ideally follow a namespace scheme like company.businessarea.project .","title":"name"},{"location":"about/#copyright_1","text":"A given copyright string will be used to fill placeholders like ${copyright} and @copyright@ in a projects source code. |- is a way to define a multi line string in YAML. For details, please check the YAML Specification . Inside the copyright string, you can use the placeholder ${currentYear} which will be replaced with the current year.","title":"copyright"},{"location":"about/#deprecated_1","text":"In case your project is deprecated you may also define a property deprecated: true . In projects that have a direct dependency to your project, UI5 Tooling will then display a deprecation warning.","title":"deprecated"},{"location":"about/#resources_1","text":"","title":"Resources"},{"location":"about/#path-mapping_1","text":"Depending on the project type, UI5 Tooling expects your projects source files to be located in certain directories. If your project's sources are located in different directories, you need to configure the path mapping accordingly. Depending on the type of project, there are several different path mappings available. Note that all configured paths must be written in POSIX (i.e. using only forward slashes / ) and relative to the project's root directory.","title":"Path Mapping"},{"location":"about/#available-path-mappings_1","text":"Applications webapp : Mapped to runtime path / (root) Default configuration: resources : configuration : paths : webapp : webapp Libraries src : Mapped to runtime path /resources test : Mapped to runtime path /test-resources Default configuration: resources : configuration : paths : src : src test : test Modules Any virtual paths can be mapped to any physical path. However, it is recommended that modules include their namespace in the virtual path and use the /resources prefix (e.g. /resources/my/library/module-xy/ ). Example configuration: resources : configuration : paths : /resources/my/library/module-xy/ : lib /resources/my/library/module-xy-min/ : dist Example For an application project with the following directory structure, you need the path mapping configuration given below: Directory Structure my-app/ \\_ ui5.yaml \\_ lib/ \\_ js/ \\_ app/ Path Mapping Configuration resources : configuration : paths : webapp : lib/js/app","title":"Available Path Mappings"},{"location":"about/#encoding-of-properties-files_1","text":"Info This configuration is available since UI5 CLI v1.7.0 Example UTF-8 resources : configuration : propertiesFileSourceEncoding : UTF-8 ISO-8859-1 resources : configuration : propertiesFileSourceEncoding : ISO-8859-1 By default the UI5 Tooling expects different encodings for *.properties i18n files, depending on the project's specification version: Specification Version Default propertiesFileSourceEncoding 2.0+ UTF-8 0.1, 1.0 or 1.1 ISO-8859-1 If your project uses a different encoding for *.properties files, you need to set the propertiesFileSourceEncoding configuration property. The UI5 Tooling will read the corresponding files of the project in the given encoding. Any non-ASCII characters will be replaced with the respective Unicode escape sequences. This allows you to deploy the resulting files to any environment, independent of how it expects *.properties files to be encoded. Please refer to RFC 7 for details.","title":"Encoding of *.properties files"},{"location":"about/#custom-configuration_1","text":"Info This configuration is available since UI5 CLI v2.2.0 and applies only to projects defining Specification Version 2.1 or higher. Example customConfiguration : myTool : key : value myOtherTool : otherKey : otherValue Custom configuration that is ignored by the UI5 Tooling. This can be used to store UI5 specific configuration for third-party tools. The \"customConfiguration\" value must be an object. For third-party tools it is recommended to follow a namespace-like structure.","title":"Custom Configuration"},{"location":"about/#framework-configuration_1","text":"Info This configuration is available since UI5 CLI v2.0.0 and applies only to projects defining Specification Version 2.0 or higher. Define your project's framework dependencies.","title":"Framework Configuration"},{"location":"about/#framework-and-version_1","text":"In your project's framework configuration you must define whether you want to use the OpenUI5 or the SAPUI5 framework and which version: OpenUI5 framework : name : OpenUI5 version : 1.82.0 SAPUI5 framework : name : SAPUI5 version : 1.82.0 If you are not sure which framework is right for you, see our documentation on the differences between OpenUI5 and SAPUI5 . You can find an overview of the available versions for each framework here: OpenUI5 Version Overview The lowest version supported by UI5 Tooling is 1.52.5 SAPUI5 Version Overview The lowest version supported by UI5 Tooling is 1.76.0 Info Projects that use the OpenUI5 framework cannot depend on projects that use the SAPUI5 framework.","title":"Framework and Version"},{"location":"about/#dependencies_1","text":"Example application specVersion : \"2.2\" type : application metadata : name : my.company.app framework : name : OpenUI5 version : 1.82.0 libraries : - name : sap.ui.core - name : sap.m - name : sap.ui.table - name : themelib_sap_fiori_3 library specVersion : \"2.2\" type : library metadata : name : my.company.library framework : name : SAPUI5 version : 1.82.0 libraries : - name : sap.ui.core - name : sap.m - name : themelib_sap_belize optional : true - name : themelib_sap_bluecrystal optional : true - name : themelib_sap_fiori_3 optional : true When building an application depending on this library as well as one of the theme libraries, only that theme is built for this library.","title":"Dependencies"},{"location":"about/#runtime-dependencies_1","text":"All libraries required by your project must be listed in the libraries section of the framework configuration: OpenUI5 framework : name : OpenUI5 version : 1.82.0 libraries : - name : sap.ui.core - name : sap.m - name : sap.ui.table SAPUI5 framework : name : SAPUI5 version : 1.82.0 libraries : - name : sap.ui.core - name : sap.m - name : sap.ui.comp","title":"Runtime Dependencies"},{"location":"about/#development-dependencies_1","text":"Development dependencies are only installed if the project defining them is the current root project. They are typically only required during the development of the project. libraries : - name : sap.ushell development : true Note that a development dependency cannot be optional and vice versa.","title":"Development Dependencies"},{"location":"about/#optional-dependencies_1","text":"Optional dependencies are installed either if the project defining them is the current root project or if the dependency is already part of the current dependency tree. A typical use case is libraries defining optional dependencies to all theme libraries they support. You can choose which theme library to use by the application that is consuming the library by declaring it as a non-optional dependency. libraries : - name : themelib_sap_fiori_3 optional : true","title":"Optional Dependencies"},{"location":"about/#build-configuration_1","text":"","title":"Build Configuration"},{"location":"about/#exclude-resources_1","text":"Example builder : resources : excludes : - \"/resources/some/project/name/test_results/**\" - \"/test-resources/**\" - \"!/test-resources/some/project/name/demo-app/**\" You can exclude a projects resources from the build process using a list of glob patterns. Matching resources will be ignored by the builder and all build tasks. Patterns are applied to the virtual path of resources (i.e. the UI5 runtime paths). Exclude patterns are always applied after any includes.","title":"Exclude Resources"},{"location":"about/#cachebuster_1","text":"Example time (default) builder : cachebuster : signatureType : time hash builder : cachebuster : signatureType : hash By default, the generated cachebuster info file signatures are based on timestamps ( time ). In setups like CI environments, a mechanism based on file hashes ( hash ) might be more reliable. Also see PR #241 for more details.","title":"Cachebuster"},{"location":"about/#component-preload-generation_1","text":"For projects of type application a Component-preload.js bundle is generated by default. You can override this default behavior by defining a componentPreload configuration. For projects of type library there is no Component Preload created by default. However you can define a componentPreload configuration to create Component Preload bundles. Those will be created in addition to the library-preload.js bundle. There are two ways of including components, which can also be used in combination with each other:","title":"Component Preload Generation"},{"location":"about/#paths_1","text":"The paths option takes one or multiple patterns. For every matched file a separate Component-preload.js will be generated. Patterns are always applied relative to the project's virtual source directory /resources/ Example builder : componentPreload : paths : - \"my/great/app/**/Component.js\"","title":"paths"},{"location":"about/#namespaces_1","text":"The namespaces option takes one or multiple component namespaces, which correspond to the directory structures: Example builder : componentPreload : namespaces : - \"my/great/app/componentOne\" - \"my/great/app/componentTwo\"","title":"namespaces"},{"location":"about/#custom-tasks_1","text":"Example builder : customTasks : - name : custom-task-1 beforeTask : replaceCopyright configuration : some-key : some value - name : custom-task-2 afterTask : custom-task-1 configuration : color : blue You can define custom build tasks that will be executed for the project. Please refer to the Custom Tasks Documentation for a detailed explanation and examples of the build extensibility. Each customTasks entry must define the name of the custom task as defined in its metadata.name property. In addition, the execution order needs to be defined by referencing a standard task or an already configured custom task using the afterTask or beforeTask property. Optionally, arbitrary configuration can be passed to the custom task.","title":"Custom Tasks"},{"location":"about/#jsdoc_1","text":"Example builder : jsdoc : excludes : - \"some/project/name/thirdparty/**\" You can exclude the resources of a project from the JSDoc build process using a list of glob patterns. Matching resources will be ignored by the JSDoc build task. Patterns are always applied relative to the project's virtual source directory /resources/ . These excludes are applied before any general builder excludes that have been defined in builder.resources.excludes .","title":"JSDoc"},{"location":"about/#server-configuration_1","text":"Example server : settings : httpPort : 1337 httpsPort : 1443 By default, UI5 Tooling will serve applications using Port 8080 . When running in HTTP/2 or HTTPS mode, Port 8443 will be used. If the default port is already in use, the next highest free port will be used. A project can also configure alternative default ports. If the configured port is already in use, an error will be thrown. The default and configured server ports can always be overwritten with the CLI parameter --port .","title":"Server Configuration"},{"location":"about/#extension-configuration_1","text":"Example specVersion : \"2.2\" type : application metadata : name : my.application --- specVersion : \"2.2\" kind : extension type : project-shim metadata : name : my.application.thirdparty shims : configurations : lodash : specVersion : \"2.2\" type : module metadata : name : lodash resources : configuration : paths : /resources/my/application/thirdparty/ : \"\" Extensions configuration can be added to any projects ui5.yaml . For better readability, it should to be located after the projects configuration, separated by three dashes \" --- \". In cases where an extension shall be reused across multiple projects you can make it a module itself and have its configuration in a standalone ui5.yaml located inside that module. Extensions can be identified by the kind: extension configuration. Note that if no kind configuration is given, project is assumed.","title":"Extension Configuration"},{"location":"about/#available-extensions_1","text":"Custom Tasks Custom Server Middleware Project Shims","title":"Available Extensions"},{"location":"about/#custom-bundling_1","text":"Example builder : bundles : - bundleDefinition : name : \"sap-ui-custom.js\" defaultFileTypes : - \".js\" sections : - mode : raw filters : - ui5loader-autoconfig.js resolve : true sort : true bundleOptions : optimize : true - bundleDefinition : name : \"app.js\" defaultFileTypes : - \".js\" sections : - mode : preload filters : - some/app/Component.js resolve : true sort : true - mode : provided filters : - ui5loader-autoconfig.js resolve : true bundleOptions : optimize : true Custom bundles can be defined in the ui5.yaml . Within the builder/bundles configuration a list of bundleDefinitions can be described.","title":"Custom Bundling"},{"location":"about/#properties_1","text":"bundles A list of bundle definitions. A bundleDefinition contains of the following options: name : The module bundle name defaultFileTypes : List of default file types which should be included in the bundle sections : A list of module bundle definition sections. Each section specifies an embedding technology (see API-Reference ) and lists the resources that should be in- or excluded from the section. mode : The embedding technology (e.g. provided, raw, preload) filters : List of resources as glob patterns that should be in- or excluded. A pattern either contains of a trailing slash / or single * and double ** asterisks which denote an arbitrary number of characters or folder names. Exludes should be marked with a leading exclamation mark '!'. The order of filters is relevant, a later exclusion overrides an earlier inclusion and vice versa. resolve : Setting resolve to true will also include all (transitive) dependencies of the files resolveConditional : Whether conditional dependencies of modules should be resolved and added to the module set for this section. By default set to false declareRawModules : Whether raw modules should be declared after jQuery.sap.global became available. With the usage of the ui5loader, this flag should be set to 'false'. By default set to false renderer : Whether renderers for controls should be added to the module set. By default set to false sort : By default, modules are sorted by their dependencies. The sorting can be suppressed by setting the option to false bundleOptions optimize : By default set to false . If set to true , the module bundle gets minified decorateBootstrapModule : By default set to false . If set to true , the module will be decorated with an optimization marker addTryCatchRestartWrapper : By default set to false . If set to true , bootable module bundles gets wrapped with a try/catch to filter \"Restart\" errors usePredefineCalls : If set to true , sap.ui.predefine is used for UI5 modules numberOfParts : By default set to 1 . The number of parts into which a module bundle should be splitted","title":"Properties"},{"location":"about/#specification-versions_1","text":"A project must define a Specification Version by setting the specVersion property. The UI5 Tooling uses this information to detect whether the currently installed version is compatible to a projects configuration. specVersion : \"2.2\" [ ... ] To use new features, a project might need to update the specVersion property. For a given Specification Version MAJOR.MINOR we will increment: MAJOR when there are breaking changes that might require additional actions by the project maintainer MINOR when adding new features that are fully backward compatible All changes are documented below.","title":"Specification Versions"},{"location":"about/#compatibility-matrix_1","text":"Unless otherwise noted in the table below, the UI5 Tooling modules are backward compatible. Version UI5 CLI Release 2.2 v2.4.0+ 2.1 v2.2.0+ 2.0 v2.0.0+ 1.1 v1.13.0+ 1.0 v1.0.0+ 0.1 v0.0.1+","title":"Compatibility Matrix"},{"location":"about/#specification-version-22_1","text":"Features: Custom task extensions can make use of the TaskUtil Helper Class Specification Version 2.2 projects are supported by UI5 CLI v2.4.0 and above.","title":"Specification Version 2.2"},{"location":"about/#specification-version-21_1","text":"Features: Adds support for the \"customConfiguration\" configuration Custom middleware extensions can make use of the MiddlewareUtil Helper Class Specification Version 2.1 projects are supported by UI5 CLI v2.2.0 and above.","title":"Specification Version 2.1"},{"location":"about/#specification-version-20_1","text":"Breaking changes: Adds and enforces schema validation of the ui5.yaml By default the encoding of *.properties files is expected to be UTF-8 (as opposed to ISO-8859-1 in projects defining specification versions below 2.0) A project can still explicitly configure the encoding of its *.properties files Features: Adds support for the \"framework\" configuration to consume SAPUI5 libraries. Specification Version 2.0 projects are supported by UI5 CLI v2.0.0 and above.","title":"Specification Version 2.0"},{"location":"about/#specification-version-11_1","text":"Features: Adds support for the theme-library type. Specification Version 1.1 projects are supported by UI5 CLI v1.13.0 and above.","title":"Specification Version 1.1"},{"location":"about/#specification-version-10_1","text":"First stable release. Specification Version 1.0 projects are supported by UI5 CLI v1.0.0 and above.","title":"Specification Version 1.0"},{"location":"about/#specification-version-01_1","text":"Initial version. Specification Version 0.1 projects are compatible with UI5 CLI v0.0.1 and above.","title":"Specification Version 0.1"},{"location":"data_mgmt_analytics/analytics/","text":"Hands-on: Modeling \u00b6 Lorem Ipsum Commands \u00b6 mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout \u00b6 mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Hands-on Modeling"},{"location":"data_mgmt_analytics/analytics/#hands-on-modeling","text":"Lorem Ipsum","title":"Hands-on: Modeling"},{"location":"data_mgmt_analytics/analytics/#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"data_mgmt_analytics/analytics/#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"data_mgmt_analytics/datamgmt/","text":"Hands-on: Setup and examples with data integration/federation \u00b6 Lorem Ipsum Commands \u00b6 mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout \u00b6 mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Hands-on Setup and examples with data integration/federation"},{"location":"data_mgmt_analytics/datamgmt/#hands-on-setup-and-examples-with-data-integrationfederation","text":"Lorem Ipsum","title":"Hands-on: Setup and examples with data integration/federation"},{"location":"data_mgmt_analytics/datamgmt/#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"data_mgmt_analytics/datamgmt/#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"data_mgmt_analytics/starterkit/","text":"Starter Kit: Data Mgmt & Analytics \u00b6 The UI5 Build Extensibility enables you to enhance the build process of any UI5 project. In addition to the standard tasks , custom tasks can be created. The UI5 community already created many custom tasks which you can integrate into your project. They are often prefixed by ui5-task- to make them easily searchable in the npm registry . Please note that custom tasks from third parties can not only modify your project but also execute arbitrary code on your system. In fact, this is the case for all npm packages you install. Always act with the according care and follow best practices. Configuration \u00b6 You can configure your build process with additional build task. These custom tasks are defined in the project configuration . To hook your custom tasks into the different build phases of a project, they need to reference other tasks to be executed before or after. This can be a standard task or another custom task. Note that a custom task will only be executed if the referenced task is executed (i.e. is not disabled). In the below example, when building the library my.library the custom babel task will be executed before the standard task generateComponentPreload . Another custom task called generateMarkdownFiles is then executed immediately after the standard task uglify .","title":"Starter Kit"},{"location":"data_mgmt_analytics/starterkit/#starter-kit-data-mgmt-analytics","text":"The UI5 Build Extensibility enables you to enhance the build process of any UI5 project. In addition to the standard tasks , custom tasks can be created. The UI5 community already created many custom tasks which you can integrate into your project. They are often prefixed by ui5-task- to make them easily searchable in the npm registry . Please note that custom tasks from third parties can not only modify your project but also execute arbitrary code on your system. In fact, this is the case for all npm packages you install. Always act with the according care and follow best practices.","title":"Starter Kit: Data Mgmt &amp; Analytics"},{"location":"data_mgmt_analytics/starterkit/#configuration","text":"You can configure your build process with additional build task. These custom tasks are defined in the project configuration . To hook your custom tasks into the different build phases of a project, they need to reference other tasks to be executed before or after. This can be a standard task or another custom task. Note that a custom task will only be executed if the referenced task is executed (i.e. is not disabled). In the below example, when building the library my.library the custom babel task will be executed before the standard task generateComponentPreload . Another custom task called generateMarkdownFiles is then executed immediately after the standard task uglify .","title":"Configuration"},{"location":"data_mgmt_analytics/usecase/","text":"Use Case \u00b6 The UI5 Build Extensibility enables you to enhance the build process of any UI5 project. In addition to the standard tasks , custom tasks can be created. The UI5 community already created many custom tasks which you can integrate into your project. They are often prefixed by ui5-task- to make them easily searchable in the npm registry . Please note that custom tasks from third parties can not only modify your project but also execute arbitrary code on your system. In fact, this is the case for all npm packages you install. Always act with the according care and follow best practices. Configuration \u00b6 You can configure your build process with additional build task. These custom tasks are defined in the project configuration . To hook your custom tasks into the different build phases of a project, they need to reference other tasks to be executed before or after. This can be a standard task or another custom task. Note that a custom task will only be executed if the referenced task is executed (i.e. is not disabled). In the below example, when building the library my.library the custom babel task will be executed before the standard task generateComponentPreload . Another custom task called generateMarkdownFiles is then executed immediately after the standard task uglify .","title":"Use Case"},{"location":"data_mgmt_analytics/usecase/#use-case","text":"The UI5 Build Extensibility enables you to enhance the build process of any UI5 project. In addition to the standard tasks , custom tasks can be created. The UI5 community already created many custom tasks which you can integrate into your project. They are often prefixed by ui5-task- to make them easily searchable in the npm registry . Please note that custom tasks from third parties can not only modify your project but also execute arbitrary code on your system. In fact, this is the case for all npm packages you install. Always act with the according care and follow best practices.","title":"Use Case"},{"location":"data_mgmt_analytics/usecase/#configuration","text":"You can configure your build process with additional build task. These custom tasks are defined in the project configuration . To hook your custom tasks into the different build phases of a project, they need to reference other tasks to be executed before or after. This can be a standard task or another custom task. Note that a custom task will only be executed if the referenced task is executed (i.e. is not disabled). In the below example, when building the library my.library the custom babel task will be executed before the standard task generateComponentPreload . Another custom task called generateMarkdownFiles is then executed immediately after the standard task uglify .","title":"Configuration"},{"location":"extension/extension1/","text":"Hands-on: Set-up & examples with CAP \u00b6 Lorem Ipsum Commands \u00b6 mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout \u00b6 mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Hands-on Set-up & examples with CAP"},{"location":"extension/extension1/#hands-on-set-up-examples-with-cap","text":"Lorem Ipsum","title":"Hands-on: Set-up &amp; examples with CAP"},{"location":"extension/extension1/#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"extension/extension1/#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"extension/extension2/","text":"Hands-on: Set-up & examples with Kyma Runtime \u00b6 Lorem Ipsum Commands \u00b6 mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout \u00b6 mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Hands-on Set-up & examples with Kyma Runtime"},{"location":"extension/extension2/#hands-on-set-up-examples-with-kyma-runtime","text":"Lorem Ipsum","title":"Hands-on: Set-up &amp; examples with Kyma Runtime"},{"location":"extension/extension2/#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"extension/extension2/#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"extension/extension3/","text":"Hands-on: Set-up & examples with ABAP Runtime \u00b6 Lorem Ipsum Commands \u00b6 mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout \u00b6 mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Hands-on Set-up & examples with ABAP Runtime"},{"location":"extension/extension3/#hands-on-set-up-examples-with-abap-runtime","text":"Lorem Ipsum","title":"Hands-on: Set-up &amp; examples with ABAP Runtime"},{"location":"extension/extension3/#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"extension/extension3/#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"extension/starterkit/","text":"Starter Kit: Intelligent Technologies \u00b6 The UI5 Build Extensibility enables you to enhance the build process of any UI5 project. In addition to the standard tasks , custom tasks can be created. The UI5 community already created many custom tasks which you can integrate into your project. They are often prefixed by ui5-task- to make them easily searchable in the npm registry . Please note that custom tasks from third parties can not only modify your project but also execute arbitrary code on your system. In fact, this is the case for all npm packages you install. Always act with the according care and follow best practices. Configuration \u00b6 You can configure your build process with additional build task. These custom tasks are defined in the project configuration . To hook your custom tasks into the different build phases of a project, they need to reference other tasks to be executed before or after. This can be a standard task or another custom task. Note that a custom task will only be executed if the referenced task is executed (i.e. is not disabled). In the below example, when building the library my.library the custom babel task will be executed before the standard task generateComponentPreload . Another custom task called generateMarkdownFiles is then executed immediately after the standard task uglify .","title":"Starter Kit"},{"location":"extension/starterkit/#starter-kit-intelligent-technologies","text":"The UI5 Build Extensibility enables you to enhance the build process of any UI5 project. In addition to the standard tasks , custom tasks can be created. The UI5 community already created many custom tasks which you can integrate into your project. They are often prefixed by ui5-task- to make them easily searchable in the npm registry . Please note that custom tasks from third parties can not only modify your project but also execute arbitrary code on your system. In fact, this is the case for all npm packages you install. Always act with the according care and follow best practices.","title":"Starter Kit: Intelligent Technologies"},{"location":"extension/starterkit/#configuration","text":"You can configure your build process with additional build task. These custom tasks are defined in the project configuration . To hook your custom tasks into the different build phases of a project, they need to reference other tasks to be executed before or after. This can be a standard task or another custom task. Note that a custom task will only be executed if the referenced task is executed (i.e. is not disabled). In the below example, when building the library my.library the custom babel task will be executed before the standard task generateComponentPreload . Another custom task called generateMarkdownFiles is then executed immediately after the standard task uglify .","title":"Configuration"},{"location":"extension/usecase/","text":"Use Case \u00b6 The UI5 Build Extensibility enables you to enhance the build process of any UI5 project. In addition to the standard tasks , custom tasks can be created. The UI5 community already created many custom tasks which you can integrate into your project. They are often prefixed by ui5-task- to make them easily searchable in the npm registry . Please note that custom tasks from third parties can not only modify your project but also execute arbitrary code on your system. In fact, this is the case for all npm packages you install. Always act with the according care and follow best practices. Configuration \u00b6 You can configure your build process with additional build task. These custom tasks are defined in the project configuration . To hook your custom tasks into the different build phases of a project, they need to reference other tasks to be executed before or after. This can be a standard task or another custom task. Note that a custom task will only be executed if the referenced task is executed (i.e. is not disabled). In the below example, when building the library my.library the custom babel task will be executed before the standard task generateComponentPreload . Another custom task called generateMarkdownFiles is then executed immediately after the standard task uglify .","title":"Use Case"},{"location":"extension/usecase/#use-case","text":"The UI5 Build Extensibility enables you to enhance the build process of any UI5 project. In addition to the standard tasks , custom tasks can be created. The UI5 community already created many custom tasks which you can integrate into your project. They are often prefixed by ui5-task- to make them easily searchable in the npm registry . Please note that custom tasks from third parties can not only modify your project but also execute arbitrary code on your system. In fact, this is the case for all npm packages you install. Always act with the according care and follow best practices.","title":"Use Case"},{"location":"extension/usecase/#configuration","text":"You can configure your build process with additional build task. These custom tasks are defined in the project configuration . To hook your custom tasks into the different build phases of a project, they need to reference other tasks to be executed before or after. This can be a standard task or another custom task. Note that a custom task will only be executed if the referenced task is executed (i.e. is not disabled). In the below example, when building the library my.library the custom babel task will be executed before the standard task generateComponentPreload . Another custom task called generateMarkdownFiles is then executed immediately after the standard task uglify .","title":"Configuration"},{"location":"integration/apimng/","text":"Hands-on: Setup and examples with API Management \u00b6 The UI5 Build Extensibility enables you to enhance the build process of any UI5 project. In addition to the standard tasks , custom tasks can be created. The UI5 community already created many custom tasks which you can integrate into your project. They are often prefixed by ui5-task- to make them easily searchable in the npm registry . Please note that custom tasks from third parties can not only modify your project but also execute arbitrary code on your system. In fact, this is the case for all npm packages you install. Always act with the according care and follow best practices. Configuration \u00b6 You can configure your build process with additional build task. These custom tasks are defined in the project configuration . To hook your custom tasks into the different build phases of a project, they need to reference other tasks to be executed before or after. This can be a standard task or another custom task. Note that a custom task will only be executed if the referenced task is executed (i.e. is not disabled). In the below example, when building the library my.library the custom babel task will be executed before the standard task generateComponentPreload . Another custom task called generateMarkdownFiles is then executed immediately after the standard task uglify .","title":"Hands-on Setup and examples with API Management"},{"location":"integration/apimng/#hands-on-setup-and-examples-with-api-management","text":"The UI5 Build Extensibility enables you to enhance the build process of any UI5 project. In addition to the standard tasks , custom tasks can be created. The UI5 community already created many custom tasks which you can integrate into your project. They are often prefixed by ui5-task- to make them easily searchable in the npm registry . Please note that custom tasks from third parties can not only modify your project but also execute arbitrary code on your system. In fact, this is the case for all npm packages you install. Always act with the according care and follow best practices.","title":"Hands-on: Setup and examples with API Management"},{"location":"integration/apimng/#configuration","text":"You can configure your build process with additional build task. These custom tasks are defined in the project configuration . To hook your custom tasks into the different build phases of a project, they need to reference other tasks to be executed before or after. This can be a standard task or another custom task. Note that a custom task will only be executed if the referenced task is executed (i.e. is not disabled). In the below example, when building the library my.library the custom babel task will be executed before the standard task generateComponentPreload . Another custom task called generateMarkdownFiles is then executed immediately after the standard task uglify .","title":"Configuration"},{"location":"integration/cpi/","text":"Hands-on: CPI \u00b6 The UI5 Build Extensibility enables you to enhance the build process of any UI5 project. In addition to the standard tasks , custom tasks can be created. The UI5 community already created many custom tasks which you can integrate into your project. They are often prefixed by ui5-task- to make them easily searchable in the npm registry . Please note that custom tasks from third parties can not only modify your project but also execute arbitrary code on your system. In fact, this is the case for all npm packages you install. Always act with the according care and follow best practices. Configuration \u00b6 You can configure your build process with additional build task. These custom tasks are defined in the project configuration . To hook your custom tasks into the different build phases of a project, they need to reference other tasks to be executed before or after. This can be a standard task or another custom task. Note that a custom task will only be executed if the referenced task is executed (i.e. is not disabled). In the below example, when building the library my.library the custom babel task will be executed before the standard task generateComponentPreload . Another custom task called generateMarkdownFiles is then executed immediately after the standard task uglify .","title":"Hands-on CPI"},{"location":"integration/cpi/#hands-on-cpi","text":"The UI5 Build Extensibility enables you to enhance the build process of any UI5 project. In addition to the standard tasks , custom tasks can be created. The UI5 community already created many custom tasks which you can integrate into your project. They are often prefixed by ui5-task- to make them easily searchable in the npm registry . Please note that custom tasks from third parties can not only modify your project but also execute arbitrary code on your system. In fact, this is the case for all npm packages you install. Always act with the according care and follow best practices.","title":"Hands-on: CPI"},{"location":"integration/cpi/#configuration","text":"You can configure your build process with additional build task. These custom tasks are defined in the project configuration . To hook your custom tasks into the different build phases of a project, they need to reference other tasks to be executed before or after. This can be a standard task or another custom task. Note that a custom task will only be executed if the referenced task is executed (i.e. is not disabled). In the below example, when building the library my.library the custom babel task will be executed before the standard task generateComponentPreload . Another custom task called generateMarkdownFiles is then executed immediately after the standard task uglify .","title":"Configuration"},{"location":"integration/openconnectors/","text":"Hands-on: Open Connectors \u00b6 The UI5 Build Extensibility enables you to enhance the build process of any UI5 project. In addition to the standard tasks , custom tasks can be created. The UI5 community already created many custom tasks which you can integrate into your project. They are often prefixed by ui5-task- to make them easily searchable in the npm registry . Please note that custom tasks from third parties can not only modify your project but also execute arbitrary code on your system. In fact, this is the case for all npm packages you install. Always act with the according care and follow best practices. Configuration \u00b6 You can configure your build process with additional build task. These custom tasks are defined in the project configuration . To hook your custom tasks into the different build phases of a project, they need to reference other tasks to be executed before or after. This can be a standard task or another custom task. Note that a custom task will only be executed if the referenced task is executed (i.e. is not disabled). In the below example, when building the library my.library the custom babel task will be executed before the standard task generateComponentPreload . Another custom task called generateMarkdownFiles is then executed immediately after the standard task uglify .","title":"Hands-on Open Connectors"},{"location":"integration/openconnectors/#hands-on-open-connectors","text":"The UI5 Build Extensibility enables you to enhance the build process of any UI5 project. In addition to the standard tasks , custom tasks can be created. The UI5 community already created many custom tasks which you can integrate into your project. They are often prefixed by ui5-task- to make them easily searchable in the npm registry . Please note that custom tasks from third parties can not only modify your project but also execute arbitrary code on your system. In fact, this is the case for all npm packages you install. Always act with the according care and follow best practices.","title":"Hands-on: Open Connectors"},{"location":"integration/openconnectors/#configuration","text":"You can configure your build process with additional build task. These custom tasks are defined in the project configuration . To hook your custom tasks into the different build phases of a project, they need to reference other tasks to be executed before or after. This can be a standard task or another custom task. Note that a custom task will only be executed if the referenced task is executed (i.e. is not disabled). In the below example, when building the library my.library the custom babel task will be executed before the standard task generateComponentPreload . Another custom task called generateMarkdownFiles is then executed immediately after the standard task uglify .","title":"Configuration"},{"location":"integration/starterkit/","text":"Starter Kit: Integration \u00b6 The UI5 Build Extensibility enables you to enhance the build process of any UI5 project. In addition to the standard tasks , custom tasks can be created. The UI5 community already created many custom tasks which you can integrate into your project. They are often prefixed by ui5-task- to make them easily searchable in the npm registry . Please note that custom tasks from third parties can not only modify your project but also execute arbitrary code on your system. In fact, this is the case for all npm packages you install. Always act with the according care and follow best practices. Configuration \u00b6 You can configure your build process with additional build task. These custom tasks are defined in the project configuration . To hook your custom tasks into the different build phases of a project, they need to reference other tasks to be executed before or after. This can be a standard task or another custom task. Note that a custom task will only be executed if the referenced task is executed (i.e. is not disabled). In the below example, when building the library my.library the custom babel task will be executed before the standard task generateComponentPreload . Another custom task called generateMarkdownFiles is then executed immediately after the standard task uglify .","title":"Starter Kit"},{"location":"integration/starterkit/#starter-kit-integration","text":"The UI5 Build Extensibility enables you to enhance the build process of any UI5 project. In addition to the standard tasks , custom tasks can be created. The UI5 community already created many custom tasks which you can integrate into your project. They are often prefixed by ui5-task- to make them easily searchable in the npm registry . Please note that custom tasks from third parties can not only modify your project but also execute arbitrary code on your system. In fact, this is the case for all npm packages you install. Always act with the according care and follow best practices.","title":"Starter Kit: Integration"},{"location":"integration/starterkit/#configuration","text":"You can configure your build process with additional build task. These custom tasks are defined in the project configuration . To hook your custom tasks into the different build phases of a project, they need to reference other tasks to be executed before or after. This can be a standard task or another custom task. Note that a custom task will only be executed if the referenced task is executed (i.e. is not disabled). In the below example, when building the library my.library the custom babel task will be executed before the standard task generateComponentPreload . Another custom task called generateMarkdownFiles is then executed immediately after the standard task uglify .","title":"Configuration"},{"location":"integration/usecase/","text":"Use Case \u00b6 The UI5 Build Extensibility enables you to enhance the build process of any UI5 project. In addition to the standard tasks , custom tasks can be created. The UI5 community already created many custom tasks which you can integrate into your project. They are often prefixed by ui5-task- to make them easily searchable in the npm registry . Please note that custom tasks from third parties can not only modify your project but also execute arbitrary code on your system. In fact, this is the case for all npm packages you install. Always act with the according care and follow best practices. Configuration \u00b6 You can configure your build process with additional build task. These custom tasks are defined in the project configuration . To hook your custom tasks into the different build phases of a project, they need to reference other tasks to be executed before or after. This can be a standard task or another custom task. Note that a custom task will only be executed if the referenced task is executed (i.e. is not disabled). In the below example, when building the library my.library the custom babel task will be executed before the standard task generateComponentPreload . Another custom task called generateMarkdownFiles is then executed immediately after the standard task uglify .","title":"Use Case"},{"location":"integration/usecase/#use-case","text":"The UI5 Build Extensibility enables you to enhance the build process of any UI5 project. In addition to the standard tasks , custom tasks can be created. The UI5 community already created many custom tasks which you can integrate into your project. They are often prefixed by ui5-task- to make them easily searchable in the npm registry . Please note that custom tasks from third parties can not only modify your project but also execute arbitrary code on your system. In fact, this is the case for all npm packages you install. Always act with the according care and follow best practices.","title":"Use Case"},{"location":"integration/usecase/#configuration","text":"You can configure your build process with additional build task. These custom tasks are defined in the project configuration . To hook your custom tasks into the different build phases of a project, they need to reference other tasks to be executed before or after. This can be a standard task or another custom task. Note that a custom task will only be executed if the referenced task is executed (i.e. is not disabled). In the below example, when building the library my.library the custom babel task will be executed before the standard task generateComponentPreload . Another custom task called generateMarkdownFiles is then executed immediately after the standard task uglify .","title":"Configuration"},{"location":"onbording/onbording/","text":"Onbording \u00b6 Lorem Ipsum Commands \u00b6 mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout \u00b6 mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Overview"},{"location":"onbording/onbording/#onbording","text":"Lorem Ipsum","title":"Onbording"},{"location":"onbording/onbording/#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"onbording/onbording/#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"}]}